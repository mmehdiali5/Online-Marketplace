@layout EmptyLayout
@page "/sellerSignup"
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using OnlineMarketPlace.Models;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Net.Http;
@using System.Threading.Tasks;
@using System.Text;
@inject NavigationManager NavManager
<div class="row my-5">
    <div class=" col-10 col-md-3 text-center p-5 m-auto" style="border: 1px solid #DADCE0;border-radius: 10px;">
        <div class="justify-content- center">
            <img src="images/DigitalEmporiumLogo.png" height="150px">
            <br>
            <br>
            <span style="font-size: x-large;">Seller Sign up</span>
            <br>
            <span>to continue to start selling</span>
            <br>
            <br>
            <br>
            <EditForm Model="@sellerSignUp" OnValidSubmit="submitForm">

                <DataAnnotationsValidator></DataAnnotationsValidator>
                <InputText class="form-control" @bind-Value="sellerSignUp.Name" placeholder="Enter your name" style="font-size: large;" />
                <br>
                <ValidationMessage For="@(() => sellerSignUp.Name )"></ValidationMessage>
                <br />
                <InputText class="form-control" @bind-Value="sellerSignUp.Email" placeholder="Enter your email" style="font-size: large;" />
                <br>
                <ValidationMessage For="@(() => sellerSignUp.Email )"></ValidationMessage>
                <br />
                <InputText type="password" class="form-control" @bind-Value="sellerSignUp.Password" placeholder="Enter your password" style="font-size: large;" />
                <br>
                <ValidationMessage For="@(() => sellerSignUp.Password )"></ValidationMessage>
                <br />
                <InputText class="form-control" @bind-Value="sellerSignUp.Phone" placeholder="Enter your phone" style="font-size: large;" />
                <br>
                <ValidationMessage For="@(() => sellerSignUp.Phone )"></ValidationMessage>
                <br />
                <InputText class="form-control" @bind-Value="sellerSignUp.Country" placeholder="Enter your country" style="font-size: large;" />
                <br>
                <ValidationMessage For="@(() => sellerSignUp.Country )"></ValidationMessage>
                <br />
                <InputText class="form-control" @bind-Value="sellerSignUp.City" placeholder="Enter your city" style="font-size: large;" />
                <br>
                <ValidationMessage For="@(() => sellerSignUp.City )"></ValidationMessage>
                <br />
                <InputText class="form-control" @bind-Value="sellerSignUp.PostalCode" placeholder="Enter your postal code" style="font-size: large;" />
                <br>
                <ValidationMessage For="@(() => sellerSignUp.PostalCode )"></ValidationMessage>
                <br />
                <InputText class="form-control" @bind-Value="sellerSignUp.State" placeholder="Enter your state" style="font-size: large;" />
                <br>
                <ValidationMessage For="@(() => sellerSignUp.State )"></ValidationMessage>
                <br />
                <InputText class="form-control" @bind-Value="sellerSignUp.StreetAddress" placeholder="Enter your street address" style="font-size: large;" />
                <br>
                <ValidationMessage For="@(() => sellerSignUp.StreetAddress )"></ValidationMessage>
                <br />
                <button class="btn btn-primary" type="submit">
                    Sign up
                </button>
                <br>
                <br>
                <span style="color:red">@sellerSignUp.emailWarning</span>
            </EditForm>
            <br>
            <a href="sellerSignin">Already have an account?</a>
        </div>
    </div>
</div>
@code {

    async Task submitForm()
    {
        Address address = new Address();
        UserItem userItem = new UserItem();
        Seller seller = new Seller();
        JArray obj = await checkEmailDuplication(sellerSignUp.Email);
        if (obj.Count==0) {
            address.City = sellerSignUp.City;
            address.Country = sellerSignUp.Country;
            address.PostalCode = sellerSignUp.PostalCode;
            address.StreetAddress = sellerSignUp.StreetAddress;
            address.State = sellerSignUp.State;
            int addressID = await addToDB("address", address);
            userItem.AddressId = addressID;
            userItem.Name = sellerSignUp.Name;
            userItem.Phone = sellerSignUp.Phone;
            userItem.Email = sellerSignUp.Email;
            userItem.DateOfBirth = null;
            userItem.Password = sellerSignUp.Password;
            int userItemID = await addToDB("userItem", userItem);
            seller.PaymentTypeId = 1;
            seller.ShopAddressId = addressID;
            seller.UserId = userItemID;
            await addToDB("seller", seller);
            NavManager.NavigateTo("/sellerSignin");
        }
        else {
            sellerSignUp.emailWarning = "Email already in use.";
        }


    }

    async Task<JArray> checkEmailDuplication(string email)
    {
        String jsonDataAsString;
        HttpClient http = new HttpClient();
        var requestMessage = new HttpRequestMessage()
        {
            Method = new HttpMethod("GET"),
            RequestUri = new Uri("http://localhost:5000/odata/userItem?$filter=email eq '" + email + "'")
        };
        var response = await http.SendAsync(requestMessage);
        jsonDataAsString = await response.Content.ReadAsStringAsync();
        var data = (JObject)JsonConvert.DeserializeObject(jsonDataAsString);
        return (JArray)data["value"];
    }
    async Task<int> addToDB<T>(string table, T obj)
    {
        var json = JsonConvert.SerializeObject(obj);
        var data = new StringContent(json, Encoding.UTF8, "application/json");
        var url = "http://localhost:5000/odata/" + table;
        using var client = new HttpClient();
        var response = await client.PostAsync(url, data);
        var result = await response.Content.ReadAsStringAsync();
        var data1 = (JObject)JsonConvert.DeserializeObject(result);
        return Convert.ToInt32(data1["value"][0].ToString());

    }

    public class Seller
    {
        public int UserId { get; set; }
        public int ShopAddressId { get; set; }
        public int PaymentTypeId { get; set; }
    }

    public class Address
    {

        public string Country { get; set; }
        public string City { get; set; }
        public string PostalCode { get; set; }
        public string State { get; set; }
        public string StreetAddress { get; set; }
    }
    public class UserItem
    {
        public int AddressId { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public DateTime? DateOfBirth { get; set; }
        public string Phone { get; set; }

    }
    public class SellerSignUp
    {
        public string emailWarning=null;
        [Required]
        public string Name { get; set; }
        [Required]
        [EmailAddress]
        public string Email { get; set; }
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }
        [DataType(DataType.Date)]
        public DateTime? DateOfBirth { get; set; }
        [Required]
        [Phone]
        public string Phone { get; set; }
        [Required]
        public string Country { get; set; }
        [Required]
        public string City { get; set; }
        [Required]
        public string PostalCode { get; set; }
        [Required]
        public string State { get; set; }
        [Required]
        public string StreetAddress { get; set; }

    }
    SellerSignUp sellerSignUp = new SellerSignUp();
}